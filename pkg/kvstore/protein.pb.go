// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protein.proto

package kvstore

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Protein struct {
	Entry                string   `protobuf:"bytes,1,opt,name=Entry,proto3" json:"Entry,omitempty"`
	ProteinName          string   `protobuf:"bytes,2,opt,name=ProteinName,proto3" json:"ProteinName,omitempty"`
	Organism             string   `protobuf:"bytes,3,opt,name=Organism,proto3" json:"Organism,omitempty"`
	Taxonomy             string   `protobuf:"bytes,4,opt,name=Taxonomy,proto3" json:"Taxonomy,omitempty"`
	EC                   string   `protobuf:"bytes,5,opt,name=EC,proto3" json:"EC,omitempty"`
	Sequence             string   `protobuf:"bytes,6,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	Length               int32    `protobuf:"varint,7,opt,name=Length,proto3" json:"Length,omitempty"`
	GO                   []string `protobuf:"bytes,8,rep,name=GO,proto3" json:"GO,omitempty"`
	HAMAP                []string `protobuf:"bytes,9,rep,name=HAMAP,proto3" json:"HAMAP,omitempty"`
	KEGG                 []string `protobuf:"bytes,10,rep,name=KEGG,proto3" json:"KEGG,omitempty"`
	BioCyc               []string `protobuf:"bytes,11,rep,name=BioCyc,proto3" json:"BioCyc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Protein) Reset()         { *m = Protein{} }
func (m *Protein) String() string { return proto.CompactTextString(m) }
func (*Protein) ProtoMessage()    {}
func (*Protein) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3c3736181c33c07, []int{0}
}

func (m *Protein) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Protein.Unmarshal(m, b)
}
func (m *Protein) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Protein.Marshal(b, m, deterministic)
}
func (m *Protein) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protein.Merge(m, src)
}
func (m *Protein) XXX_Size() int {
	return xxx_messageInfo_Protein.Size(m)
}
func (m *Protein) XXX_DiscardUnknown() {
	xxx_messageInfo_Protein.DiscardUnknown(m)
}

var xxx_messageInfo_Protein proto.InternalMessageInfo

func (m *Protein) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func (m *Protein) GetProteinName() string {
	if m != nil {
		return m.ProteinName
	}
	return ""
}

func (m *Protein) GetOrganism() string {
	if m != nil {
		return m.Organism
	}
	return ""
}

func (m *Protein) GetTaxonomy() string {
	if m != nil {
		return m.Taxonomy
	}
	return ""
}

func (m *Protein) GetEC() string {
	if m != nil {
		return m.EC
	}
	return ""
}

func (m *Protein) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *Protein) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Protein) GetGO() []string {
	if m != nil {
		return m.GO
	}
	return nil
}

func (m *Protein) GetHAMAP() []string {
	if m != nil {
		return m.HAMAP
	}
	return nil
}

func (m *Protein) GetKEGG() []string {
	if m != nil {
		return m.KEGG
	}
	return nil
}

func (m *Protein) GetBioCyc() []string {
	if m != nil {
		return m.BioCyc
	}
	return nil
}

func init() {
	proto.RegisterType((*Protein)(nil), "kvstore.Protein")
}

func init() { proto.RegisterFile("protein.proto", fileDescriptor_b3c3736181c33c07) }

var fileDescriptor_b3c3736181c33c07 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x69, 0x66, 0xda, 0xce, 0xdc, 0x41, 0x17, 0x17, 0x91, 0x8b, 0xab, 0xe0, 0x6a, 0x56,
	0x6e, 0x7c, 0x82, 0xb1, 0x84, 0x08, 0xfe, 0x74, 0x18, 0x7d, 0x81, 0x3a, 0x84, 0x5a, 0xa4, 0x89,
	0xa6, 0x51, 0xec, 0x53, 0xf8, 0xca, 0x92, 0x9b, 0x56, 0x5c, 0x25, 0xdf, 0xf9, 0x0e, 0x07, 0x12,
	0x38, 0x79, 0xf7, 0x2e, 0x98, 0xce, 0x5e, 0xc5, 0xd3, 0x61, 0xf9, 0xf6, 0x35, 0x04, 0xe7, 0xcd,
	0xe5, 0x8f, 0x80, 0x72, 0x9f, 0x14, 0x9e, 0x41, 0xae, 0x6c, 0xf0, 0x23, 0x65, 0x32, 0xdb, 0xae,
	0x0f, 0x09, 0x50, 0xc2, 0x66, 0x2a, 0x3c, 0x36, 0xbd, 0x21, 0xc1, 0xee, 0x7f, 0x84, 0x17, 0xb0,
	0xaa, 0x7d, 0xdb, 0xd8, 0x6e, 0xe8, 0x69, 0xc1, 0xfa, 0x8f, 0xa3, 0x7b, 0x6e, 0xbe, 0x9d, 0x75,
	0xfd, 0x48, 0xcb, 0xe4, 0x66, 0xc6, 0x53, 0x10, 0xaa, 0xa2, 0x9c, 0x53, 0xa1, 0xaa, 0xd8, 0x7d,
	0x32, 0x1f, 0x9f, 0xc6, 0x1e, 0x0d, 0x15, 0xa9, 0x3b, 0x33, 0x9e, 0x43, 0x71, 0x6f, 0x6c, 0x1b,
	0x5e, 0xa9, 0x94, 0xd9, 0x36, 0x3f, 0x4c, 0x14, 0x37, 0x74, 0x4d, 0x2b, 0xb9, 0x88, 0x1b, 0xba,
	0x8e, 0x6f, 0xb8, 0xdd, 0x3d, 0xec, 0xf6, 0xb4, 0xe6, 0x28, 0x01, 0x22, 0x2c, 0xef, 0x94, 0xd6,
	0x04, 0x1c, 0xf2, 0x3d, 0x2e, 0xde, 0x74, 0xae, 0x1a, 0x8f, 0xb4, 0xe1, 0x74, 0xa2, 0x97, 0x82,
	0x7f, 0xe8, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x68, 0xf6, 0x8e, 0x21, 0x32, 0x01, 0x00, 0x00,
}
